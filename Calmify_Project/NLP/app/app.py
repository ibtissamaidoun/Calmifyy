import sys
import os
from flask import Flask, request, jsonify
import multiprocessing
from transformers import AutoTokenizer, AutoModelForSeq2SeqLM

# Ajout du r√©pertoire des services au PATH
service_dir = os.path.join(os.path.dirname(__file__), "services")
if service_dir not in sys.path:
    sys.path.append(service_dir)

print("R√©pertoire des services ajout√© au PATH Python :", sys.path)

# Importation des services personnalis√©s
try:
    from services.emotion_analysis import predict_emotions, map_emotions_to_stress
    print("Services import√©s avec succ√®s.")
except ImportError as e:
    print(f"Erreur lors de l'importation des services : {e}")
    raise

# Initialisation de Flask
app = Flask(__name__)

# Configuration du mod√®le Flan-T5
MODEL_NAME = "google/flan-t5-base"  # Mod√®le l√©ger et rapide
print("Chargement du mod√®le Flan-T5...")
tokenizer = AutoTokenizer.from_pretrained(MODEL_NAME)
model = AutoModelForSeq2SeqLM.from_pretrained(MODEL_NAME)
print("Mod√®le Flan-T5 et tokenizer charg√©s avec succ√®s.")

@app.route('/test', methods=['GET'])
def test():
    print("Endpoint /test appel√©")
    return jsonify({"message": "Le serveur fonctionne correctement !"})

@app.route('/chat', methods=['POST'])
def chat():
    try:
        print("Endpoint /chat appel√©")
        
        # V√©rification et r√©cup√©ration des donn√©es JSON
        data = request.get_json()
        if not data or "text" not in data or not isinstance(data["text"], str):
            return jsonify({"error": "Donn√©e invalide : 'text' doit √™tre une cha√Æne"}), 400
        
        user_input = data["text"]
        print("Donn√©es re√ßues :", user_input)

        # √âtape 1 : Analyse des √©motions et du niveau de stress
        try:
            print("Analyse des √©motions...")
            emotion_scores = predict_emotions(user_input)
            print("Scores des √©motions :", emotion_scores)

            print("Mapping du niveau de stress...")
            stress_level = map_emotions_to_stress(emotion_scores)
            print("Niveau de stress :", stress_level)
        except Exception as e:
            return jsonify({"error": f"Erreur lors de l'analyse des √©motions : {e}"}), 500

        # √âtape 2 : G√©n√©ration de la r√©ponse du chatbot avec Flan-T5
        try:
            print("G√©n√©ration de la r√©ponse du chatbot...")
            input_ids = tokenizer(
                user_input,
                return_tensors="pt",
                padding=True,
                truncation=True,
                max_length=50
            )
            outputs = model.generate(
                input_ids["input_ids"],
                max_length=50,  # R√©ponses courtes
                temperature=0.7,
                top_p=0.9,
                do_sample=True
            )
            chatbot_response = tokenizer.decode(outputs[0], skip_special_tokens=True)
            print("R√©ponse du chatbot :", chatbot_response)

        except Exception as e:
            return jsonify({"error": f"Erreur lors de la g√©n√©ration de r√©ponse : {e}"}), 500

        # G√©n√©ration de la recommandation bas√©e sur le niveau de stress
        recommendation = ""
        if stress_level == "faible":
            recommendation = "Nous vous encourageons avec des messages de motivation. Continuez ainsi ! üòä"
        elif stress_level == "moyen":
            recommendation = "Nous vous recommandons des vid√©os de relaxation. Prenez du temps pour vous ! üßò‚Äç‚ôÇ"
        elif stress_level == "√©lev√©":
            recommendation = "Votre niveau de stress est √©lev√©. Nous allons organiser une rencontre avec un psychologue. üè•"

        return jsonify({
            "user_input": user_input,
            "emotions": emotion_scores,
            "stress_level": stress_level,
            "chatbot_response": chatbot_response,
            "recommendation": recommendation
        })

    except Exception as e:
        print(f"Erreur dans l'endpoint /chat : {e}")
        return jsonify({"error": str(e)}), 500

if __name__ == "__main__":
    multiprocessing.freeze_support()
    try:
        print("D√©marrage du serveur Flask...")
        app.run(host="0.0.0.0", port=5000, debug=False, use_reloader=False)
    except Exception as e:
        print(f"Erreur lors du d√©marrage du serveur Flask : {e}")